import ROOT
from ROOT import *
import numpy as np
import math
import os

uncertainty_count_factor = 0.1 #10% background uncertainty for the significance
#variable = "RecoDiJet_delta_R"
variable = "RecoDiJet_delta_R"
normalisation = False 
luminosity = 10000 #pb^-1
log_scale = True

selection = "selNone"
#selection = "selRecoEleGt0"

input_dir_bkg = "/eos/user/t/tcritchl/outputs/output_final/testingAll/"
input_dir_sgl = "/afs/cern.ch/user/t/tcritchl/testfinal/FCCAnalyses_local/examples/FCCee/bsm/LLPs/DisplacedHNL/HNL_sample_creation/signal_HNLS/final_50k/"
output_dir =  "/afs/cern.ch/user/t/tcritchl/testfinal/FCCAnalyses_local/examples/FCCee/bsm/LLPs/DisplacedHNL/HNL_sample_creation/signal_HNLS/SignalvsBackground/50k_histograms/"

if not os.path.exists(output_dir):
    os.mkdir(output_dir)
    print("Directory ",output_dir," Created ")
else:
    print("Directory ",output_dir," already exists")

file_Zud = input_dir_bkg + 'p8_ee_Zud_ecm91_' + selection+'_histo'+'.root'
file_Zbb = input_dir_bkg + 'p8_ee_Zbb_ecm91_' + selection+'_histo'+'.root'
file_Zcc = input_dir_bkg + 'p8_ee_Zcc_ecm91_' + selection+'_histo'+'.root'

file_HNL_20 = input_dir_sgl + 'HNL_ejj_20GeV_Ven_10-3__'+selection+'_histo'+'.root'
file_HNL_50 = input_dir_sgl + 'HNL_ejj_50GeV_Ven_10-3__'+selection+'_histo'+'.root'
file_HNL_70 = input_dir_sgl + 'HNL_ejj_70GeV_Ven_10-3__'+selection+'_histo'+'.root'

###signal 
cross_sections_sgl = [0.004,0.002,0.001] #cross sections calculated by madgraph
total_events_sgl =[50000,50000,50000] #events generated by madgraph
files_list_signal = [
   [file_HNL_20, variable, "20GeV HNL",cross_sections_sgl[0],total_events_sgl[0]],
   [file_HNL_50, variable, "50GeV HNL",cross_sections_sgl[1],total_events_sgl[1]],
   [file_HNL_70, variable, "70GeV HNL",cross_sections_sgl[2],total_events_sgl[2]]
]

###background
cross_sections_bg = [11870.5, 5215.46, 6654.46]
total_events_bg = [497.658684, 499.786495, 438.738637] #total events * fraction
files_list_bg = [
    [file_Zud, variable, "Z -> ud", cross_sections_bg[0], total_events_bg[0]],
    [file_Zcc, variable, "Z -> cc", cross_sections_bg[1], total_events_bg[1]],
    [file_Zbb, variable, "Z -> bb", cross_sections_bg[2], total_events_bg[2]]
]

legend_list_bg = [f[2] for f in files_list_bg]
ratio_list_bg = [f[2] for f in files_list_bg]

legend_list_signal = [f[2] for f in files_list_signal]
ratio_list_signal = [f[2] for f in files_list_signal]

colors_signal = [ROOT.kMagenta - 7, ROOT.kMagenta - 2, ROOT.kMagenta + 3]
colors_bg = [856, 410, 801, 629, 879, 602, 921, 622]


def make_hist(files_list):
    
    h_list = []
    for f in files_list:
        print("Looking at file", f[2])
        my_file = ROOT.TFile.Open(f[0])  # Open the root file
        print("Getting histogram for variable", f[1])
        hist = my_file.Get(f[1])  # Select the chosen variable from the histo root file

        if normalisation:
            
            # Apply normalization based on cross section, total events, and luminosity
            cross_section = f[3]  # Cross section in pb
            events_generated = f[4]  # Total events generated
            scaling_factor = (cross_section * luminosity) / events_generated
            hist.Scale(scaling_factor)

        hist.SetDirectory(0)  # Make the chosen histogram independent of the directory
        h_list.append(hist)
        print("Histogram added to h_list")
        my_file.Close()
        print("-----------------------")
    return h_list


h_list_signal = make_hist(files_list_signal)
h_list_bg = make_hist(files_list_bg)

def make_plot(h_list_signal, h_list_bg, legend_list_signal, legend_list_bg):

    c = ROOT.TCanvas("can","can",600,600)   
    pad1 = ROOT.TPad("pad1", "pad1", 0.0, 0.25, 1.0, 1.0, 21)  # Adjust the top and bottom margins
    pad2 = ROOT.TPad("pad2", "pad2", 0.0, 0.0, 1.0, 0.2, 22)
    
    pad1.SetFillColor(0)
    pad1.SetBottomMargin(0.065)
    
    if log_scale == True:
        pad1.SetLogy()
    pad1.SetTickx()
    pad1.SetTicky()
    pad1.Draw()

    pad2.SetFillColor(1)
    pad2.SetTopMargin(0.01)
    pad2.SetBottomMargin(0.3)
    pad2.Draw()
    
    #leg_bg = ROOT.TLegend(0.12, 0.5, 0.32, 0.65)
    leg_bg = ROOT.TLegend(0.51, 0.5, 0.71, 0.65)
    leg_bg.SetFillStyle(0)
    leg_bg.SetLineWidth(0)
    
    #leg_sig = ROOT.TLegend(0.12, 0.3, 0.32, 0.45)
    leg_sig = ROOT.TLegend(0.51, 0.3, 0.71, 0.45)
    leg_sig.SetFillStyle(0)
    leg_sig.SetLineWidth(0)

    h_list = h_list_signal + h_list_bg

    h_max = 0
    for ih,h in enumerate(h_list):
        if h.GetMaximum() > h_max:
            h_max = h.GetMaximum()
        h.Sumw2()
    for ih,h in enumerate(h_list_signal):
        leg_sig.AddEntry(h, legend_list_signal[ih])
    for ih,h in enumerate(h_list_bg):
        leg_bg.AddEntry(h, legend_list_bg[ih])

    # Draw in the top panel
    pad1.cd()
    for ih,h in enumerate(h_list_signal):
        h.SetLineColor(colors_signal[ih])
        h.SetLineWidth(3)
        h.SetStats(0)
        if not log_scale and not normalisation:
            #h.SetTitle("FCCee Simulation")
            h.GetXaxis().SetTitle(f"{variable}")
            h.GetYaxis().SetTitle("Entries")
        elif log_scale and not normalisation:
            #h.SetTitle("FCCee Simulation")
            h.GetXaxis().SetTitle(f"{variable}")
            h.GetYaxis().SetTitle("Log Entries")
        elif not log_scale and normalisation:
            #h.SetTitle("FCCee Simulation")
            h.GetXaxis().SetTitle(f"{variable}")
            h.GetYaxis().SetTitle("Normalised Entries")
        elif log_scale and normalisation:
            #h.SetTitle("FCCee Simulation")
            h.GetXaxis().SetTitle(f"{variable}")
            h.GetYaxis().SetTitle("Log Normalised Entries")

        h.GetXaxis().SetTitleSize(0.03)  # Adjust the text size for X-axis label
        h.GetYaxis().SetTitleSize(0.03)  # Adjust the text size for Y-axis label
        h.GetXaxis().SetTitleOffset(1.2)  # Adjust the position of the X-axis label
        h.GetYaxis().SetTitleOffset(1.4)  # Adjust the position of the Y-axis label
        h.SetMaximum(1.25 * h_max)
        h.SetMinimum(0.0001)
        h.Draw('hist same')

    for ih,h in enumerate(h_list_bg):   
        h.SetLineColor(colors_bg[ih])
        h.SetLineWidth(3)
        h.SetStats(0)
        if not log_scale and not normalisation:
            #h.SetTitle("FCCee Simulation")
            h.GetXaxis().SetTitle(f"{variable}")
            h.GetYaxis().SetTitle("Entries")
        elif log_scale and not normalisation:
            #h.SetTitle("FCCee Simulation")
            h.GetXaxis().SetTitle(f"{variable}")
            h.GetYaxis().SetTitle("Log Entries")
        elif not log_scale and normalisation:
            #h.SetTitle("FCCee Simulation")
            h.GetXaxis().SetTitle(f"{variable}")
            h.GetYaxis().SetTitle("Normalised Entries")
        elif log_scale and normalisation:
            #h.SetTitle("FCCee Simulation")
            h.GetXaxis().SetTitle(f"{variable}")
            h.GetYaxis().SetTitle("Log Normalised Entries")

        h.GetXaxis().SetTitleSize(0.03)  # Adjust the text size for X-axis label
        h.GetYaxis().SetTitleSize(0.03)  # Adjust the text size for Y-axis label
        h.GetXaxis().SetTitleOffset(5.0)  # Adjust the position of the X-axis label
        h.GetXaxis().SetLabelOffset(0.02)
        h.GetYaxis().SetTitleOffset(1.4)  # Adjust the position of the Y-axis label
        h.SetMaximum(1.25 * h_max)
        h.SetMinimum(0.0001)
        h.Draw('hist same')

    leg_sig.Draw()
    leg_bg.Draw()
    ###top left legends###
    """
    text_title = ROOT.TLatex()
    text_title.SetTextSize(0.04)
    text_title.SetTextFont(42)
    text_title.DrawLatexNDC(0.14, 0.82, "#font[72]{FCCee} Simulation (DELPHES)")

    text_selection = ROOT.TLatex()
    text_selection.SetTextSize(0.03)
    text_selection.SetTextFont(42)
    text_selection.DrawLatexNDC(0.14, 0.77, "#font[52]{No Selection}")

    text_lumi = ROOT.TLatex()
    text_lumi.SetTextSize(0.03)
    text_lumi.SetTextFont(42)
    text_lumi.DrawLatexNDC(0.14, 0.72, "#font[52]{#sqrt{s} = 91 GeV , #int L dt = 10 fb^{-1}}")
    """
    
    ###top right legends###
    text_title = ROOT.TLatex()
    text_title.SetTextSize(0.04)
    text_title.SetTextFont(42)
    text_title.DrawLatexNDC(0.50, 0.82, "#font[72]{FCCee} Simulation (DELPHES)")
    
    text_selection = ROOT.TLatex()
    text_selection.SetTextSize(0.03)
    text_selection.SetTextFont(42)
    text_selection.DrawLatexNDC(0.50, 0.77, "#font[52]{No Selection}")

    text_lumi = ROOT.TLatex()
    text_lumi.SetTextSize(0.03)
    text_lumi.SetTextFont(42)
    text_lumi.DrawLatexNDC(0.50, 0.72, "#font[52]{#sqrt{s} = 91 GeV , #int L dt = 10 fb^{-1}}")

    pad1.RedrawAxis()

    pad2.cd()

    # Create the significance histogram once outside the loop
    n_bins = h_list_bg[0].GetNbinsX()
    x_min = h_list_bg[0].GetXaxis().GetXmin()
    x_max = h_list_bg[0].GetXaxis().GetXmax()
    h_signal_significance = ROOT.TH1F("h_signal_significance", "Significance", n_bins, x_min, x_max)

    # Fill the significance histogram for each signal
    for ih, signal_hist in enumerate(h_list_signal):
        for bin in range(1, h_signal_significance.GetNbinsX() + 1):
            s = signal_hist.Integral(bin, n_bins)
            b = sum(bg_hist.Integral(bin, n_bins) for bg_hist in h_list_bg)  # Combine background histograms
            significance = 0
            if s + b > 0:
                n = s + b
                sigma = b * uncertainty_count_factor
                significance = math.sqrt(
                    2 * (n * math.log((n * (b + sigma**2)) / (b**2 + n * sigma**2)) - (b**2 / sigma**2) * math.log((1 + (sigma**2 * (n - b)) / (b * (b + sigma**2))))
                ))
            h_signal_significance.SetBinContent(bin, significance)

    # Set the axis titles for the current signal significance histogram
    h_signal_significance.SetStats(0)
    h_signal_significance.GetYaxis().SetLabelSize(h_signal_significance.GetYaxis().GetLabelSize() * 1.6)
    h_signal_significance.GetYaxis().SetLabelOffset(0.01)
    h_signal_significance.GetYaxis().SetTitleSize(h_signal_significance.GetYaxis().GetTitleSize() * 1.6)
    h_signal_significance.GetYaxis().SetTitleOffset(0.5)
    h_signal_significance.GetXaxis().SetLabelSize(h_signal_significance.GetXaxis().GetLabelSize() * 2.3)
    h_signal_significance.GetXaxis().SetLabelOffset(0.02)
    h_signal_significance.GetXaxis().SetTitleSize(h_signal_significance.GetXaxis().GetTitleSize() * 3)
    h_signal_significance.GetXaxis().SetTitleOffset(1.05)

    h_signal_significance.Draw()

    if log_scale and normalisation:
        c.SetLogy(log_scale)
        c.SaveAs(output_dir + "BackgroundVSignal_" + selection + variable + "log_" + "norm" + ".pdf", "R")
    elif log_scale and not normalisation:
        c.SetLogy(log_scale)
        c.SaveAs(output_dir + "BackgroundVSignal_" + selection + variable + "log" + ".pdf", "R")
    elif normalisation and not log_scale:        
        c.SaveAs(output_dir + "BackgroundVSignal_" + selection + variable + "norm" + ".pdf", "R")
    else:
        c.SaveAs(output_dir + "BackgroundVSignal_" + selection + variable + ".pdf", "R")
    
    return


make_plot(h_list_signal, h_list_bg, legend_list_signal, legend_list_bg)